import { BotUser, BotUserDataService } from '@sue-bot-platform/api';
import { BotNotification } from '@sue-bot-platform/api';
import { QueuedNotification } from '@sue-bot-platform/api';
import { RECURRENCE_PATTERN, SCHEDULE_TYPE } from '@sue-bot-platform/api';
import { Injectable, NotFoundException } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { addMinutes, endOfToday, getDay, isWeekend, setHours, setMinutes, startOfToday, subMinutes } from 'date-fns';
import { isNil, map } from 'lodash';
import { InjectPinoLogger, PinoLogger } from 'nestjs-pino';
import { NotificationDataService, QueuedNotificationDataService } from '@sue-bot-platform/api';

@Injectable()
export class NotificationsPreprocessorCronService {
  private notificationsQueue: Partial<QueuedNotification>[];
  constructor(
    @InjectPinoLogger() protected readonly logger: PinoLogger,
    private readonly botUserDataService: BotUserDataService,
    private readonly notificationDataService: NotificationDataService,
    private readonly queuedNotificationDataService: QueuedNotificationDataService
  ) {
    this.notificationsQueue = [];
  }

  /**
   * Computes full list of notifications to send to all users.
   * every day at 4 AM
   */
  @Cron(CronExpression.EVERY_DAY_AT_4AM)
  async processAllNotifications(): Promise<void> {
    try {
      await this.queuedNotificationDataService.drop();
      this.notificationsQueue = [];
      const users: BotUser[] = await this.botUserDataService.findWithEnabledNotifications();
      const notifications: BotNotification[] = await this.notificationDataService.findAllActive();
      for (const user of users) {
        this.addToQueue(user, notifications);
      }
      for (let i = 0; i < this.notificationsQueue.length; i += 1000) {
        const batch: Partial<QueuedNotification>[] = this.notificationsQueue.slice(i, i + 1000);
        await this.queuedNotificationDataService.bulkInsert(batch);
      }
    } catch (error) {
      this.logger.error(`Precompute All Pending Notifications: ${error.message}`);
    }
  }

  async processNotificationsByUserChatId(chatId: number): Promise<void> {
    try {
      const user: BotUser = await this.botUserDataService.findByChatId(chatId);
      if (isNil(user)) {
        throw new NotFoundException(`User with chatId: ${chatId} not found`);
      }
      await this.queuedNotificationDataService.removeAllByUserId(user.id);
      if (user.notificationsEnabled && !user.blocked) {
        const notifications: BotNotification[] = await this.notificationDataService.findAllActive();
        this.addToQueue(user, notifications);
      }
    } catch (error) {
      this.logger.error(`Precompute Users Pending Notifications: ${error.message}`);
    }
  }

  private addToQueue(user: BotUser, notifications: BotNotification[]): void {
    for (const notification of notifications) {
      if (this.shouldSendNotificationToday(notification)) {
        const sendTime: Date = this.calculateSendTime(user, notification);
        if (!isNil(sendTime)) {
          this.notificationsQueue.push({
            userId: user.id,
            notificationId: notification.id,
            sendTime,
            processed: false,
          });
        }
      }
    }
  }

  private shouldSendNotificationToday(notification: BotNotification): boolean {
    const date: Date = endOfToday();
    const day: number = getDay(date);
    const recurrencePatterns = notification.recurrencePattern;
    if (recurrencePatterns.includes(RECURRENCE_PATTERN.DAILY)) {
      return true;
    }
    if (recurrencePatterns.includes(RECURRENCE_PATTERN.WEEKDAYS) && !isWeekend(date)) {
      return true;
    }
    if (recurrencePatterns.includes(RECURRENCE_PATTERN.WEEKENDS) && isWeekend(date)) {
      return true;
    }
    const daysOfWeek: Record<number, RECURRENCE_PATTERN> = {
      0: RECURRENCE_PATTERN.SUNDAY,
      1: RECURRENCE_PATTERN.MONDAY,
      2: RECURRENCE_PATTERN.TUESDAY,
      3: RECURRENCE_PATTERN.WEDNESDAY,
      4: RECURRENCE_PATTERN.THURSDAY,
      5: RECURRENCE_PATTERN.FRIDAY,
      6: RECURRENCE_PATTERN.SATURDAY,
    };
    return recurrencePatterns.includes(daysOfWeek[day]);
  }

  private calculateSendTime(user: BotUser, notification: BotNotification): Date | null {
    if (notification.scheduleType === SCHEDULE_TYPE.EXACT_TIME && notification.time) {
      const [hours, minutes]: number[] = map(notification.time.split(':'), Number);
      let date: Date = startOfToday();
      date = setHours(date, hours);
      date = setMinutes(date, minutes);
      return date;
    }
    if (notification.scheduleType === SCHEDULE_TYPE.WAKE_UP_OFFSET && user.wakeUpTime) {
      const [hours, minutes]: number[] = map(user.wakeUpTime.split(':'), Number);
      let date: Date = startOfToday();
      date = setHours(date, hours);
      date = setMinutes(date, minutes);
      date = addMinutes(date, notification.offset);
      return date;
    }
    if (notification.scheduleType === SCHEDULE_TYPE.BED_TIME_OFFSET && user.bedTime) {
      const [hours, minutes]: number[] = map(user.bedTime.split(':'), Number);
      let date: Date = startOfToday();
      date = setHours(date, hours);
      date = setMinutes(date, minutes);
      date = subMinutes(date, notification.offset);
      return date;
    }
    return null;
  }
}

// Sample data to populate database
// export const NOTIFICATIONS: Partial<BotNotification>[] = [
//     {
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 0,
//       captions: [
//         '–ü—Ä–æ–∫–∏–¥–∞–π—Å—è, –∫—Ä–∞—Å—É–Ω–µ üëã',
//         '–ü—Ä–æ–∫–∏–¥–∞–π—Å—è, –¥—ñ–≤—á–∏–Ω–∫–æ! –°—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∏–π –¥–µ–Ω—å:)',
//         '–ü—Ä–æ–∫–∏–¥–∞–π—Å—è, –º–æ—è Sue girl! –°–≤—ñ—Ç —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ:)',
//       ],
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       active: true,
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 25,
//       captions: [
//         '–ü–æ—á–Ω–∏ —Å–≤—ñ–π —Ä–∞–Ω–æ–∫ –∑—ñ —Å–∫–ª—è–Ω–∫–∏ —Ç–µ–ø–ª–æ—ó –≤–æ–¥–∏ üíß',
//         '–°–ø–µ—Ä—à—É —Å–∫–ª—è–Ω–∫–∞ —Ç–µ–ø–ª–æ—ó –≤–æ–¥–∏. –ü–æ—Ç—ñ–º –∫–∞–≤–∞, –¥–æ–±—Ä–µ?',
//         '–°–∫–ª—è–Ω–∫–∞ —Ç–µ–ø–ª–æ—ó –≤–æ–¥–∏ = –≥–∞—Ä–Ω–∏–π –ø–æ—á–∞—Ç–æ–∫ —Ä–∞–Ω–∫—É.',
//       ],
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       active: true,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 60,
//       captions: [
//         `–†–∞–Ω–∫–æ–≤–∞ <a href='https://youtu.be/P2uKBkoveH4'>–º–µ–¥–∏—Ç–∞—Ü—ñ—è</a> –¥–ª—è —Å–ø–æ–∫—ñ–π–Ω–æ–≥–æ –¥–Ω—è. –°–ø—Ä–æ–±—É–π :)`,
//         `–°–ø—Ä–æ–±—É–π <a href='https://youtu.be/P2uKBkoveH4'>–º–µ–¥–∏—Ç–∞—Ü—ñ—é</a>. –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î –±–æ—Ä–æ—Ç–∏—Å—å –∑—ñ —Å—Ç—Ä–µ—Å–æ–º —Ç–∞ —Ç—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—é, –∞ —â–µ —á—É–¥–æ–≤–æ —Ä–æ–∑—Å–ª–∞–±–ª—è—î üòä`,
//         `–ü—Ä–∏–¥—ñ–ª–∏ 5 —Ö–≤ <a href='https://youtu.be/P2uKBkoveH4'>–º–µ–¥–∏—Ç–∞—Ü—ñ—é</a>. –í–æ–Ω–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏—Å—è –Ω–∞ –≥–∞—Ä–Ω–∏–π –¥–µ–Ω—å.`,
//       ],
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       active: true,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 100,
//       captions: [
//         '–ß–∞—Å –¥–ª—è –∑–∞—Ä—è–¥–∫–∏. –û–±–∏—Ä–∞–π –ø—ñ–¥ —Å–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ üëá',
//         '–Ø–∫—É –∑–∞—Ä—è–¥–∫—É –æ–±–∏—Ä–∞—î—à —Å—å–æ–≥–æ–¥–Ω—ñ?)',
//         `–ü–∞–º'—è—Ç–∞—î—à –ø—Ä–æ –∑–∞—Ä—è–¥–∫—É? –¢–≤–æ—î —Ç—ñ–ª–æ —Ç–æ–±—ñ –ø–æ–¥—è–∫—É—î :)`,
//       ],
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       active: true,
//       buttons: [
//         {
//           text: '–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω–∞ —Ä—É—Ö–∞–Ω–∫–∞',
//           url: 'https://youtu.be/wYVUjZhU14M',
//         },
//         {
//           text: '–ó–∞—Ä—è–¥–∫–∞-—Ä–æ–∑—Ç—è–∂–∫–∞',
//           url: 'https://youtu.be/64b4bE5FzsQ',
//         },
//         {
//           text: `–ú'—è–∫–µ –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è`,
//           url: 'https://youtu.be/IvJmeD0YO6s',
//         },
//       ],
//     },
//     {
//       captions: [`–°–∫–ª—è–Ω–∫–∞ üíß –≤–æ–¥–∏, –ø–∞–º'—è—Ç–∞—î—à?)`],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 120,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 200,
//       captions: [
//         `–ß–∞—Å –¥–ª—è –±'—é—Ç—ñ. –ù–µ –∑–∞–±—É–≤–∞–π –ø—Ä–æ –æ—á–∏—â–µ–Ω–Ω—è, —Ç–æ–Ω—ñ–∑–∞—Ü—ñ—é, –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è.`,
//         '–ê —Ç–µ–ø–µ—Ä –ø—ñ–Ω–∫–∞, —Ç–æ–Ω—ñ–∫, –∫—Ä–µ–º. –°–∞–º–µ –≤ —Ç–∞–∫—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.',
//         '–í–º–∏–≤–∞–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞ –¥–∞–ª—ñ –Ω–∞–Ω–µ—Å–∏ —Ç–æ–Ω—ñ–∫ —ñ –∫—Ä–µ–º.',
//       ],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//     {
//       captions: ['–®–∫—ñ—Ä—ñ –±—Ä–∞–∫—É—î –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è, –≤–∏–ø–∏–π —Å–∫–ª—è–Ω–∫—É –≤–æ–¥–∏—á–∫–∏ üíß'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 240,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 300,
//       captions: [`–¢–≤–æ—è –∞—Ñ—ñ—Ä–º–∞—Ü—ñ—è –Ω–∞ –¥–µ–Ω—å üòä`],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//     {
//       captions: ['–û—Å–≤—ñ–∂–∏ —Å–µ–±–µ —Å–∫–ª—è–Ω–∫–æ—é –≤–æ–¥–∏ üíß'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 360,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.EXACT_TIME,
//       time: '17:15',
//       captions: ['–ù–µ –∑–∞–±—É–≤–∞–π, —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ —á–∞—Å –∫–∞—Ä–±–æ–∫—Å—ñ –æ 18:00 :)'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.SATURDAY],
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.EXACT_TIME,
//       time: '18:00',
//       captions: ['Carboxy time ‚è∞\n–ì–æ—Ç–æ–≤–∞?'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.SATURDAY],
//     },
//     {
//       captions: ['–ü–µ—Ä–µ—Å–æ—Ö–ª–æ –≤ –≥–æ—Ä–ª—ñ, –≤–∏–ø–∏–π —Å–∫–ª—è–Ω–∫—É –≤–æ–¥–∏ üíß'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 480,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       captions: ['–ß–∞—Å –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–≤—Ç–æ–∫ –≤–æ–¥–∏ üíß'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 600,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       captions: ['–û—Å–≤—ñ–∂–∏ —Å–µ–±–µ —Å–∫–ª—è–Ω–∫–æ—é –≤–æ–¥–∏ üíß'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//       scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//       offset: 720,
//       buttons: [
//         confirmButton
//       ]
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.BED_TIME_OFFSET,
//       offset: 200,
//       captions: ['–í—ñ–¥–ø–æ—á–∏–Ω—å –≤—ñ–¥ —Å–æ—Ü–º–µ—Ä–µ–∂. –ü—Ä–∏–¥—ñ–ª–∏ —á–∞—Å —Å–æ–±—ñ üòä', '–¢–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç–æ—Ä–æ–Ω—É, —á–∞—Å –¥–ª—è —Å–µ–±–µ –Ω–∞—Å—Ç–∞–≤.', '–ß–∞—Å –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.BED_TIME_OFFSET,
//       offset: 140,
//       captions: [
//         `<a href='https://youtu.be/g_tea8ZNk5A'>–†–æ–∑—Ç—è–∂–∫–∞</a> –¥–ª—è —Ä–æ–∑—Å–ª–∞–±–ª–µ–Ω–Ω—è. –¢–µ, —â–æ —Ç—Ä–µ–±–∞ –≤–≤–µ—á–µ—Ä—ñ üòå`,
//         `<a href='https://youtu.be/g_tea8ZNk5A'>–ü–æ—Ä–æ–∑—Ç—è–≥—É—î–º–æ—Å—å</a>?`,
//         `–í–µ—á—ñ—Ä–Ω—è <a href='https://youtu.be/g_tea8ZNk5A'>—Ä–æ–∑—Ç—è–∂–∫–∞</a> –≤–∂–µ —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ üòä`,
//       ],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.BED_TIME_OFFSET,
//       offset: 60,
//       captions: [
//         '–ü–æ—Ç—É—Ä–±—É–π—Å—è –ø—Ä–æ —Å–µ–±–µ. –ó–º–∏–π –≤—Å—é –∫–æ—Å–º–µ—Ç–∏–∫—É –∑ –æ–±–ª–∏—á—á—è —Ç–∞ –≤–º–∏–π—Å—è. –ù–µ –∑–∞–±—É–≤–∞–π –ø—Ä–æ 3 –∫—Ä–æ–∫–∏ –¥–æ–≥–ª—è–¥—É.',
//         '–í–µ—á—ñ—Ä–Ω—ñ —Ä–∏—Ç—É–∞–ª–∏ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º. –ß–∞—Å –∑–º–∏—Ç–∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É –∫–æ—Å–º–µ—Ç–∏–∫—É, –≤–º–∏—Ç–∏—Å—å, –∞ –¥–∞–ª—ñ —Ç–æ–Ω—ñ–∫ + –∫—Ä–µ–º.',
//         '–ó–º–∏–≤–∞–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–∫—É —ñ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–µ—á—ñ—Ä–Ω—ñ–π –¥–æ–≥–ª—è–¥',
//       ],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.BED_TIME_OFFSET,
//       offset: 20,
//       captions: [
//         '–ü–æ–¥—è–∫—É–π —Ü—å–æ–º—É –¥–Ω—é —Ç–∞ –∑–∞–ø–ª–∞–Ω—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π.',
//         '–ü—Ä–∞–≤–¥–∞ –∂ –¥–µ–Ω—å –±—É–≤ —á—É–¥–æ–≤–∏–º? –©–æ –±—É–ª–æ –∫–ª–∞—Å–Ω–æ–≥–æ? –ó–≥–∞–¥–∞–π:)',
//         '–£ —Ç–µ–±–µ –±—É–≤ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å? –ß–æ–º—É?',
//       ],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//     {
//       scheduleType: SCHEDULE_TYPE.BED_TIME_OFFSET,
//       offset: 0,
//       captions: ['–í—ñ–¥–ø–æ—á–∏–≤–∞–π, –∫—Ä–∞—Å—É–Ω–µ!', '–î–æ–±—Ä–∞–Ω—ñ—á, –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –¥—ñ–≤—á–∏–Ω–∫–æ:)', '–ß–∞—Å –≤–∫–ª–∞–¥–∞—Ç–∏—Å—å —Å–ø–∞—Ç–∫–∏.'],
//       active: true,
//       recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//     },
//   ];

// export const WATER_NOTIFICATIONS: Partial<BotNotification>[] = [
//       {
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 30,
//         captions: [
//           '–ü–æ—á–Ω–∏ —Å–≤—ñ–π —Ä–∞–Ω–æ–∫ –∑—ñ —Å–∫–ª—è–Ω–∫–∏ —Ç–µ–ø–ª–æ—ó –≤–æ–¥–∏ üíß',
//           '–°–ø–µ—Ä—à—É —Å–∫–ª—è–Ω–∫–∞ —Ç–µ–ø–ª–æ—ó –≤–æ–¥–∏. –ü–æ—Ç—ñ–º –∫–∞–≤–∞, –¥–æ–±—Ä–µ?',
//           '–°–∫–ª—è–Ω–∫–∞ —Ç–µ–ø–ª–æ—ó –≤–æ–¥–∏ = –≥–∞—Ä–Ω–∏–π –ø–æ—á–∞—Ç–æ–∫ —Ä–∞–Ω–∫—É.',
//         ],
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         active: true,
//         buttons: [
//           confirmButton
//         ]
//       },
//       {
//         captions: [`–°–∫–ª—è–Ω–∫–∞ üíß –≤–æ–¥–∏, –ø–∞–º'—è—Ç–∞—î—à?)`],
//         active: true,
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 120,
//         buttons: [
//           confirmButton
//         ]
//       },
//       {
//         captions: ['–®–∫—ñ—Ä—ñ –±—Ä–∞–∫—É—î –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è, –≤–∏–ø–∏–π —Å–∫–ª—è–Ω–∫—É –≤–æ–¥–∏—á–∫–∏ üíß'],
//         active: true,
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 240,
//         buttons: [
//           confirmButton
//         ]
//       },
//       {
//         captions: ['–û—Å–≤—ñ–∂–∏ —Å–µ–±–µ —Å–∫–ª—è–Ω–∫–æ—é –≤–æ–¥–∏ üíß'],
//         active: true,
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 360,
//         buttons: [
//           confirmButton
//         ]
//       },
//       {
//         captions: ['–ü–µ—Ä–µ—Å–æ—Ö–ª–æ –≤ –≥–æ—Ä–ª—ñ, –≤–∏–ø–∏–π —Å–∫–ª—è–Ω–∫—É –≤–æ–¥–∏ üíß'],
//         active: true,
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 480,
//         buttons: [
//           confirmButton
//         ]
//       },
//       {
//         captions: ['–ß–∞—Å –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–≤—Ç–æ–∫ –≤–æ–¥–∏ üíß'],
//         active: true,
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 600,
//         buttons: [
//           confirmButton
//         ]
//       },
//       {
//         captions: ['–û—Å–≤—ñ–∂–∏ —Å–µ–±–µ —Å–∫–ª—è–Ω–∫–æ—é –≤–æ–¥–∏ üíß'],
//         active: true,
//         recurrencePattern: [RECURRENCE_PATTERN.DAILY],
//         scheduleType: SCHEDULE_TYPE.WAKE_UP_OFFSET,
//         offset: 720,
//         buttons: [
//           confirmButton
//         ]
//       }
//     ];
